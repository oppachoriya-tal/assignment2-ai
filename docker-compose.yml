services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bookreview-postgres
    environment:
      POSTGRES_DB: bookreview_db
      POSTGRES_USER: bookreview_user
      POSTGRES_PASSWORD: bookreview_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookreview_user -d bookreview_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bookreview-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama AI Service (removed - using Google Gemini instead)
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: bookreview-ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   environment:
  #     - OLLAMA_HOST=0.0.0.0
  #     - NODE_TLS_REJECT_UNAUTHORIZED=0
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # Backend API
  backend:
    build: ./backend
    container_name: bookreview-backend
    env_file:
      - .env                    # Main environment file
      - backend/.env           # Backend-specific environment file
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://bookreview_user:bookreview_password@postgres:5432/bookreview_db?schema=public
      REDIS_URL: redis://redis:6379
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-1.5-flash}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}
      PORT: 3000
      CORS_ORIGIN: "*"
      ELASTICSEARCH_URL: http://elasticsearch:9200
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3333}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Simple HTML App
  frontend:
    build: ./frontend
    container_name: bookreview-frontend
    env_file:
      - .env                    # Main environment file
      - frontend/.env           # Frontend-specific environment file
    environment:
      VITE_API_BASE: ${VITE_API_BASE:-http://localhost:3000}
      VITE_NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3333:80"
    depends_on:
      backend:
        condition: service_healthy

  # Elasticsearch (for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bookreview-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  # ollama_data:  # removed - using Google Gemini instead
